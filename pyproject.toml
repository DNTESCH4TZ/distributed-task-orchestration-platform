[tool.poetry]
name = "task-orchestrator"
version = "0.1.0"
description = "Production-grade distributed task orchestration platform for 1M+ RPS"
authors = ["Dante First <your.email@example.com>"]
readme = "README.md"
license = "MIT"
python = "^3.11"

[tool.poetry.dependencies]
python = "^3.11"

# Core async framework - PERFORMANCE OPTIMIZED
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
uvloop = "^0.19.0"  # Faster event loop for asyncio (2-4x faster)
httptools = "^0.6.1"  # Fast HTTP parser

# Async HTTP client
httpx = "^0.25.2"
aiohttp = "^3.9.1"

# Database - ASYNC with connection pooling
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
asyncpg = "^0.29.0"  # Fastest PostgreSQL driver for Python
alembic = "^1.12.1"
psycopg2-binary = "^2.9.9"  # Fallback sync driver

# Redis - ASYNC with connection pooling
redis = {extras = ["hiredis"], version = "^5.0.1"}  # hiredis for C-level performance
hiredis = "^2.2.3"
aioredis = "^2.0.1"

# Message Queue
celery = {extras = ["redis", "msgpack"], version = "^5.3.4"}
kombu = "^5.3.4"
amqp = "^5.2.0"

# Data validation & serialization - FAST
pydantic = {extras = ["email"], version = "^2.5.2"}
pydantic-settings = "^2.1.0"
orjson = "^3.9.10"  # 2-5x faster than standard json
msgpack = "^1.0.7"  # Binary serialization for Redis/Celery

# Observability
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-exporter-jaeger = "^1.21.0"

# Monitoring & Logging
structlog = "^23.2.0"  # Structured logging
python-json-logger = "^2.0.7"

# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"

# Utilities
python-dotenv = "^1.0.0"
click = "^8.1.7"  # CLI tool
tenacity = "^8.2.3"  # Retry logic with exponential backoff
pytz = "^2023.3"

# ClickHouse for analytics
clickhouse-driver = "^0.2.6"
aioch = "^0.0.2"  # Async ClickHouse

# CircuitBreaker pattern
pybreaker = "^1.0.1"

# Rate limiting
slowapi = "^0.1.9"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.3"
pytest-xdist = "^3.5.0"  # Parallel test execution
faker = "^20.1.0"
factory-boy = "^3.3.0"
httpx = "^0.25.2"  # For testing async clients

# Code quality
black = "^23.12.0"
isort = "^5.13.2"
flake8 = "^6.1.0"
pylint = "^3.0.3"
mypy = "^1.7.1"
bandit = "^1.7.5"  # Security linter
safety = "^2.3.5"  # Dependency vulnerability scanner

# Pre-commit hooks
pre-commit = "^3.6.0"

# Performance profiling
py-spy = "^0.3.14"
memray = "^1.10.0"

# Type stubs
types-redis = "^4.6.0.11"
types-pytz = "^2023.3.1.1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ========================================
# BLACK - Code formatter
# ========================================
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# ========================================
# ISORT - Import sorter
# ========================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]

# ========================================
# MYPY - Static type checker
# ========================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true
ignore_missing_imports = false
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "prometheus_client.*",
    "pybreaker.*",
    "slowapi.*",
    "aioch.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# ========================================
# PYTEST - Testing framework
# ========================================
[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "-n", "auto",  # Run tests in parallel
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
env = [
    "ENVIRONMENT=test",
    "TESTING=1",
]

# ========================================
# COVERAGE - Code coverage
# ========================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ========================================
# BANDIT - Security linter
# ========================================
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

